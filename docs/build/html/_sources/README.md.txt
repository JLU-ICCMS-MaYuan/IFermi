
<img src="../source/_static/logo-01.png"
     alt="ifermi logo"
     style="float: center; margin-right: 10px;" />

![The Fermi surface of Magneisum Diboride](../source/_static/logo-01.png)


IFermi is a package which provides tools for plotting Fermi surfaces
from DFT output. IFermi is also useful for visualisation of slices of
the three-dimensional Fermi surface along a specified plane. The idea 
is to provide tools which allow for more tailored Fermi surface plots
than what other plotting software currently offer.

The main features include:

1. **Plotting of three-dimensional Fermi surfaces, with interactive plotting
   supported by Mayavi_, Plotly_ and Matplotlib_ (see recommended 
   libraries below).**

2. **Taking a slice of a three-dimensional Fermi surface along a specified 
   plane and plotting the resulting contour.**

3. **Identification and visualisation of vanishingly small Fermi surfaces**

   - useful in the identification of Dirac points.
   - requires a DFT scf calculation on a more fine k-mesh

Notes about the use of external libraries: 

   - VASP calculations are imported using Pymatgen_.
   - Band interpolation is carried out using BoltzTraP2_   
   - Plotting is supported in Mayavi_, Plotly_ and Matplotlib_.
   - I reccomned using Mayavi_ or Plotly_ for three-dimensional
     Fermi surface visualisation, and Matplotlib_ for two 
     plotting two-dimensional slices. 

The code currently primarily supports VASP calculations, but will 
soon be extended to other platforms supported by Pymatgen_ 
(Quantum Espresso, Questaal, etc.)


## Usage

IFermi can be used from the command-line or from a python API.

While is is easiest to use a vasprun.xml file for generation of the FermiSurface 
object, it is also possible to specify energy values on a uniform k-grid. 

A guide to using each command can be found on the
`Tutorial page <http://sumo.readthedocs.io/en/latest/tutorials.html>`_.

For a preview of the functionality of IFermi, see the
`Gallery <http://sumo.readthedocs.io/en/latest/gallery.html>`_.

Currently, the scripts provided are:

- ``ifermi-fsplot``: For generating a three-dimensional plot of the 
    Fermi surface of a material.
- ``ifermi-slice``: For plotting a slice of the three-dimensional 
    Fermi surface along a specified plane.
- ``ifermi-diracplot``: For generating three-dimensional plots of Dirac
    points, where Dirac points are displayed as red dots for easy 
    identification.
- ``ifermi-diracslice``: For plotting slices of a Fermi surface with
    Dirac points.

### Python interface

The two core classes in robocrystallographer are:

- `StructureCondenser`: to condense the structure into an descriptive JSON
  representation.
- `StructureDescriber`: to turn the condensed structure into a text description.

A minimal working example for generating text descriptions is simply:

```python
from pymatgen import Structure
from robocrys import StructureCondenser, StructureDescriber

structure = Structure.from_file("my_structure.cif") # other file formats also supported

# alternatively, uncomment the lines below to use the MPRester object
# to fetch structures from the Materials Project database
# from pymatgen import MPRester
# structure = MPRester(API_KEY=None).get_structure_by_material_id("mp-856")

condenser = StructureCondenser()
describer = StructureDescriber()

condensed_structure = condenser.condense_structure(structure)
description = describer.describe(condensed_structure)
```

Where `structure` is a pymatgen Structure object. Both classes have many
options for customising the output of the structure
descriptions. More information is provided in the
[module documentation](https://hackingmaterials.github.io/robocrystallographer/modules).

### Example output

An example of the output generated by robocrystallographer for SnO<sub>2</sub> ([mp-856](https://materialsproject.org/materials/mp-856/)) is given below:

<p align="center">
<img alt="SnO2 crystal structure" src="https://raw.githubusercontent.com/hackingmaterials/robocrystallographer/master/docs/_static/rutile.jpg" height=
"200px">
</p>

```
 SnO2 is Rutile structured and crystallizes in the tetragonal P4_2/mnm space
 group. The structure is three-dimensional. Sn(1) is bonded to six equivalent
 O(1) atoms to form a mixture of edge and corner-sharing SnO6 octahedra. The
 corner-sharing octahedral tilt angles are 51°. All Sn(1)–O(1) bond lengths
 are 2.09 Å. O(1) is bonded in a trigonal planar geometry to three equivalent
 Sn(1) atoms.
```

## How to cite IFermi

*A research paper has been submitted. This section will be updated when the paper has been published online.*

## Installation

IFermi can be installed using pip:

```bash
pip install ifermi
```

IFermi requires Python 3.6+. 

## Tests
From a developer installation, the unit tests can be
run (from the root directory of the project) using::

  python3 -m unittest discover tests

## Detailed requirements

IFermi is currently compatible with Python 3.5+ and relies on a number of
open-source python packages, specifically:

- Pymatgen_ (version >= 2017.12.30)
- Numpy_
- Scipy_
- Matplotlib_
- Spglib_
- Phonopy_
- SeeK-path_
- `H5py <https://www.h5py.org>`_

.. _matplotlib: https://matplotlib.org
.. _numpy: http://www.numpy.org
.. _phonopy: https://atztogo.github.io/phonopy
.. _pymatgen: http://pymatgen.org
.. _scipy: https://www.scipy.org
.. _seek-path: https://github.com/giovannipizzi/seekpath
.. _spglib: https://atztogo.github.io/spglib


## Contributing

I have tried to implement the program in a logical way.
However, if you think that it could use some improvement
or added functionality,send a push request to the GitHub page. 
I would greatly appreciate any contributions.

## License

Sumo is made available under the MIT License.

## Acknowledgements

Alex Ganose for help developing/improving code.
Sinead Griffin for suggesting the project.
